# VDC Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# Set variables once
variables:
- group: VDC_SECRETS_Copy
trigger:
- master
stages:
- stage: Validate
  jobs:
  - job: SetupValidationResourceGroup
    pool: 
      name: 'vdc-self-hosted'
    steps:
    - task: AzurePowerShell@4
      displayName: "Setup Validation Resource Group"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ValidationResourceGroupSetup.ps1'
        ScriptArguments: '-ResourceGroupName vdc-validation-rg -SetupResourceGroup'
        azurePowerShellVersion: 'LatestVersion'
  - job: StorageAccounts
    pool:
      name: 'vdc-self-hosted'
    dependsOn: SetupValidationResourceGroup
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Storage Accounts"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/StorageAccounts/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Diagnostic Storage Account"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "DiagnosticStorageAccount" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Artifacts Storage Account"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "ArtifactsStorageAccount" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: LogAnalytics
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ SetupValidationResourceGroup, StorageAccounts ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Log Analytics"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/LogAnalytics/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Log Analytics"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "LogAnalytics" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: NetworkSecurityGroups
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ SetupValidationResourceGroup, StorageAccounts ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Network Security Groups"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/NetworkSecurityGroups/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - On-Premises NSG"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "OnPremisesNSG" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: ApplicationSecurityGroups
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ SetupValidationResourceGroup, StorageAccounts ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Application Security Groups"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/ApplicationSecurityGroups/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Domain Controller ASG"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "DomainControllerASG" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: VirtualNetwork
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ SetupValidationResourceGroup, StorageAccounts ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Virtual NetWork"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/VirtualNetwork/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Virtual Network"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "VirtualNetwork" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: VirtualNetworkGateway
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ SetupValidationResourceGroup, StorageAccounts ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Virtual Network Gateway"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/VirtualNetworkGateway/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Virtual Network Gateway"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "VirtualNetworkGateway" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: KeyVault
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ SetupValidationResourceGroup, StorageAccounts ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Key Vault"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/KeyVault/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Key Vault"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "KeyVault" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Enable Service Endpoint On Key Vault"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "EnableServiceEndpointOnKeyVault" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: ActiveDirectory
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ SetupValidationResourceGroup, StorageAccounts ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Active Directory"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/ActiveDirectory/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Active Directory VM"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "ActiveDirectoryVM" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Install Active Directory"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "InstallActiveDirectory" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: TearDownValidationResourceGroup
    pool: 
      name: 'vdc-self-hosted'
    dependsOn: [ StorageAccounts, LogAnalytics, NetworkSecurityGroups, ApplicationSecurityGroups, VirtualNetwork, VirtualNetworkGateway, ActiveDirectory ]
    steps:
    - task: AzurePowerShell@4
      displayName: "Teardown Validation Resource Group"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ValidationResourceGroupSetup.ps1'
        ScriptArguments: '-TearDownResourceGroup'
        azurePowerShellVersion: 'LatestVersion'
- stage: Deploy
  jobs:
  - job: DiagnosticStorageAccount
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    steps:
    - task: AzurePowerShell@4
      displayName: "Diagnostic Storage Account"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "DiagnosticStorageAccount"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: LogAnalytics
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: DiagnosticStorageAccount
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Log Analytics"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "LogAnalytics"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: OnPremisesNSG
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ LogAnalytics, DiagnosticStorageAccount ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Network Security Group"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "OnPremisesNSG"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: DomainControllerASG
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    dependsOn: DiagnosticStorageAccount
    steps:
    - task: AzurePowerShell@4
      displayName: "Application Security Group"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "DomainControllerASG"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: VirtualNetwork
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ OnPremisesNSG, DiagnosticStorageAccount ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Virtual Network"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "VirtualNetwork"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: KeyVault
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ DiagnosticStorageAccount, LogAnalytics, DiagnosticStorageAccount ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Key Vault"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "KeyVault"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: CreateRootCertificate
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ KeyVault, DiagnosticStorageAccount ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Create Root Certificate"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "CreateRootCertificate"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: VirtualNetworkGateway
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ VirtualNetwork, CreateRootCertificate, DiagnosticStorageAccount ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Virtual Network Gateway"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "VirtualNetworkGateway"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: EnableServiceEndpointOnKeyVault
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ VirtualNetworkGateway, DiagnosticStorageAccount ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Key Vault"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "EnableServiceEndpointOnKeyVault"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: ArtifactsStorageAccount
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    dependsOn: DiagnosticStorageAccount
    steps:
    - task: AzurePowerShell@4
      displayName: "Artifacts Storage Account"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "ArtifactsStorageAccount"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: UploadScriptsToArtifactsStorage
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ ArtifactsStorageAccount, DiagnosticStorageAccount ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Upload Scripts To Artifacts Storage"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "UploadScriptsToArtifactsStorage"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: ActiveDirectoryVM
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ VirtualNetwork, DiagnosticStorageAccount, LogAnalytics, KeyVault, ArtifactsStorageAccount ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Active Directory VM"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "ActiveDirectoryVM"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)
  - job: InstallActiveDirectory
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ ActiveDirectoryVM, DiagnosticStorageAccount ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Install Active Directory"
      inputs:
        azureSubscription: 'Kunachim Azure SC'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/On-Premise/definition.json" -ModuleConfigurationName "InstallActiveDirectory"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        TENANT_ID: $(TENANT_ID)