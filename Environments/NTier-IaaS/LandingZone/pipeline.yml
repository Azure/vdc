variables:
- group: VDC_SECRETS
trigger:
- master
stages:
- stage: Validate
  jobs:
  - job: SetupValidationResourceGroup
    pool: 
      name: 'vdc-self-hosted'
    steps:
    - task: AzurePowerShell@4
      displayName: "Setup Validation Resource Group"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ValidationResourceGroupSetup.ps1'
        ScriptArguments: '-ResourceGroupName vdc-validation-rg -SetupResourceGroup'
        azurePowerShellVersion: 'LatestVersion'
  - job: StorageAccounts
    pool:
      name: 'vdc-self-hosted'
    dependsOn: SetupValidationResourceGroup
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Storage Accounts"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/StorageAccounts/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Diagnostic Storage Account"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "DiagnosticStorageAccount" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: PowerShell@2
      displayName: "Sets multi-job variable"
      name: "bootstratInitializedOutput"
      inputs:
        targetType: 'inline'
        script: '
        
          $bootstrapInitialized = $ENV:BOOTSTRAP_INITIALIZED;
          Write-Host "##vso[task.setvariable variable=BOOTSTRAP_INITIALIZED;isOutput=true]$bootstrapInitialized";'
        pwsh: true
  - job: LogAnalytics
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ SetupValidationResourceGroup, StorageAccounts ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Log Analytics"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/LogAnalytics/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Log Analytics"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "LogAnalytics" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: AzureSecurityCenter
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ SetupValidationResourceGroup, StorageAccounts ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Azure Security Center"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/AzureSecurityCenter/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Azure Security Center"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "AzureSecurityCenter" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: NISTControls
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ SetupValidationResourceGroup, StorageAccounts ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - NIST Controls"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/NISTControls/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - NIST Controls"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "NISTControls" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: NetworkSecurityGroups
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ SetupValidationResourceGroup, StorageAccounts ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Network Security Groups"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/NetworkSecurityGroups/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Default NSG"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "DefaultNSG" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: RouteTables
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ SetupValidationResourceGroup, StorageAccounts ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Route Tables"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/RouteTables/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Default Route Table"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "DefaultRouteTable" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: VirtualNetwork
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ SetupValidationResourceGroup, StorageAccounts ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - VirtualNetwork"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/VirtualNetwork/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Virtual Network"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "VirtualNetwork" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: VirtualNetworkPeering
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ SetupValidationResourceGroup, StorageAccounts ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - VirtualNetwork Peering"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/VirtualNetworkPeering/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Local Virtual Network Peering"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "LocalVirtualNetworkPeering" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: TearDownValidationResourceGroup
    pool: 
      name: 'vdc-self-hosted'
    dependsOn: [ StorageAccounts, LogAnalytics, AzureSecurityCenter, NISTControls, NetworkSecurityGroups, RouteTables, VirtualNetwork, VirtualNetworkPeering ]
    steps:
    - task: AzurePowerShell@4
      displayName: "Teardown Validation Resource Group"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ValidationResourceGroupSetup.ps1'
        ScriptArguments: '-TearDownResourceGroup'
        azurePowerShellVersion: 'LatestVersion'
- stage: Deploy
  jobs:
  - job: DiagnosticStorageAccount
    pool:
      name: 'vdc-self-hosted'
    steps:
    - task: AzurePowerShell@4
      displayName: "Diagnostic Storage Account" 
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "DiagnosticStorageAccount"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: PowerShell@2
      displayName: "Sets multi-job variable"
      name: "bootstratInitializedOutput"
      inputs:
        targetType: 'inline'
        script: '
        
          $bootstrapInitialized = $ENV:BOOTSTRAP_INITIALIZED;
          Write-Host "##vso[task.setvariable variable=BOOTSTRAP_INITIALIZED;isOutput=true]$bootstrapInitialized";'
        pwsh: true
  - job: LogAnalytics
    pool:
      name: 'vdc-self-hosted'
    dependsOn: DiagnosticStorageAccount
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Log Analytics" 
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "LogAnalytics"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: AzureSecurityCenter
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ LogAnalytics, DiagnosticStorageAccount ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Azure Security Center" 
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "AzureSecurityCenter"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: NISTControls
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ LogAnalytics, DiagnosticStorageAccount ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "NIST Controls" 
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "NISTControls"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: ApplicationSecurityGroups
    pool:
      name: 'vdc-self-hosted'
    dependsOn: DiagnosticStorageAccount
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Web Application Security Group" 
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "WebASG"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: AzurePowerShell@4
      displayName: "Business Application Security Group" 
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "BusinessASG"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: AzurePowerShell@4
      displayName: "Data Application Security Group" 
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "DataASG"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: NetworkSecurityGroups
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ DiagnosticStorageAccount, LogAnalytics, ApplicationSecurityGroups ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Default Network Security Group" 
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "DefaultNSG"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: RouteTables
    pool:
      name: 'vdc-self-hosted'
    dependsOn: DiagnosticStorageAccount
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Default Route Table" 
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "DefaultRouteTable"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: VirtualNetwork
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ NetworkSecurityGroups, RouteTables, DiagnosticStorageAccount ]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Virtual Network" 
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "VirtualNetwork"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: AzurePowerShell@4
      displayName: "Workload Virtual Network Peering to Shared Services" 
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "LocalVirtualNetworkPeering"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: AzurePowerShell@4
      displayName: "Shared Services Virtual Network Peering to Workload" 
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/LandingZone/definition.json" -ModuleConfigurationName "RemoteVirtualNetworkPeering"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)