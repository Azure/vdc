variables:
- group: VDC_SECRETS
trigger:
- master
stages:
- stage: Validate
  jobs:
  - job: SetupValidationResourceGroup
    pool: 
      name: 'vdc-self-hosted'
    steps:
    - task: AzurePowerShell@4
      displayName: "Setup Validation Resource Group"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ValidationResourceGroupSetup.ps1'
        ScriptArguments: '-ResourceGroupName vdc-validation-rg -SetupResourceGroup'
        azurePowerShellVersion: 'LatestVersion'
  - job: KeyVault
    pool:
      name: 'vdc-self-hosted'
    dependsOn: SetupValidationResourceGroup
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Key Vault"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/KeyVault/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Key Vault"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "KeyVault" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: PowerShell@2
      displayName: "Sets multi-job variable"
      name: "bootstratInitializedOutput"
      inputs:
        targetType: 'inline'
        script: '
        
          $bootstrapInitialized = $ENV:BOOTSTRAP_INITIALIZED;
          Write-Host "##vso[task.setvariable variable=BOOTSTRAP_INITIALIZED;isOutput=true]$bootstrapInitialized";'
        pwsh: true
  - job: VirtualMachines
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [SetupValidationResourceGroup, KeyVault]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.KeyVault.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Virtual Machine Scale Sets"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/VirtualMachines/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - SQL Server AlwaysOn Virtual Machines"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "SQLServerAlwaysOnVMs" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: VirtualMachineScaleSets
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [SetupValidationResourceGroup, KeyVault]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.KeyVault.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Virtual Machine Scale Sets"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/VirtualMachineScaleSets/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Web VMSS"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "WebAppVMSS" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Business VMSS"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "BusinessAppVMSS" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: LoadBalancers
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [SetupValidationResourceGroup, KeyVault]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.KeyVault.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Load Balancers"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/LoadBalancers/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Web Load Balancer"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "WebAppLoadBalancer" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Business Load Balancer"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "BusinessAppLoadBalancer" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: AzurePowerShell@4
      displayName: "ARM Validation - SQL Server Load Balancer"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "SQLServerAlwaysOnLoadBalancer" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: StorageAccounts
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [SetupValidationResourceGroup, KeyVault]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.KeyVault.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - SQL Server Cloud Witness"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/StorageAccounts/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - SQL Server Cloud Witness"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "CloudWitnessStorageAccount" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: InternetInformationServices
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [SetupValidationResourceGroup, KeyVault]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.KeyVault.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Internet Information Services"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/InternetInformationServices/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Web IIS"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "IISOnWebVMSS" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Business IIS"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "IISOnBusinessVMSS" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: SQLServerAlwaysOn
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [SetupValidationResourceGroup, KeyVault]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.KeyVault.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - SQL Server AlwaysOn installation"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.
          
          Invoke-Pester -Script "./Modules/SQLServerAlwaysOn/2.0/Tests";
          
          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - SQL Server AlwaysOn installation"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "InstallSQLServerAlwaysOn" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: TearDownValidationResourceGroup
    pool: 
      name: 'vdc-self-hosted'
    dependsOn: [ StorageAccounts, KeyVault, VirtualMachineScaleSets, LoadBalancers, InternetInformationServices, SQLServerAlwaysOn ]
    steps:
    - task: AzurePowerShell@4
      displayName: "Teardown Validation Resource Group"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ValidationResourceGroupSetup.ps1'
        ScriptArguments: '-TearDownResourceGroup'
        azurePowerShellVersion: 'LatestVersion'
- stage: Deploy
  jobs:
  - job: KeyVault
    pool:
      name: 'vdc-self-hosted'
    steps:
    - task: AzurePowerShell@4
      displayName: "Key Vault" 
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "KeyVault"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: PowerShell@2
      displayName: "Sets multi-job variable"
      name: "bootstratInitializedOutput"
      inputs:
        targetType: 'inline'
        script: '
        
          $bootstrapInitialized = $ENV:BOOTSTRAP_INITIALIZED;
          Write-Host "##vso[task.setvariable variable=BOOTSTRAP_INITIALIZED;isOutput=true]$bootstrapInitialized";'
        pwsh: true
  - job: LoadBalancers
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: KeyVault
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.KeyVault.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Web Load Balancer"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "WebAppLoadBalancer"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: AzurePowerShell@4
      displayName: "Business Load Balancer"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "BusinessAppLoadBalancer"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: AzurePowerShell@4
      displayName: "SQL Server Load Balancer"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "SQLServerAlwaysOnLoadBalancer"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: VirtualMachines
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [KeyVault, LoadBalancers]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.KeyVault.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "SQL Server AlwaysOn Virtual Machines"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "SQLServerAlwaysOnVMs"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: VirtualMachineScaleSets
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [KeyVault, LoadBalancers]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.KeyVault.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Web VMSS"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "WebAppVMSS"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: AzurePowerShell@4
      displayName: "Business VMSS"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "BusinessAppVMSS"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: InternetInformationServices
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [KeyVault, VirtualMachineScaleSets]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.KeyVault.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Web IIS"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "IISOnWebVMSS"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: AzurePowerShell@4
      displayName: "Business IIS"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "IISOnBusinessVMSS"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
  - job: SQLServerAlwaysOn
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [KeyVault, VirtualMachines]
    variables: 
      BOOTSTRAP_INITIALIZED: $[dependencies.KeyVault.outputs['bootstratInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "SQL Server Cloud Witness"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "CloudWitnessStorageAccount"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
    - task: AzurePowerShell@4
      displayName: "SQL Server AlwaysOn installation"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/NTier-IaaS/Archetype/definition.json" -ModuleConfigurationName "InstallSQLServerAlwaysOn"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEPLOYMENT_APP_ID: $(DEPLOYMENT_APP_ID)
        DEPLOYMENT_USER_ID: $(DEPLOYMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)