# VDC Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
# Set variables once
variables:
- group: VDC_SECRETS
trigger:
- master
stages:
- stage: Validate
  jobs:
  - job: StorageAccounts
    pool:
      name: 'vdc-self-hosted'
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Storage Accounts"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.

          Invoke-Pester -Script "./Modules/StorageAccounts/2.0/Tests";

          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Diagnostic Storage Account"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "DiagnosticStorageAccount" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
    - task: PowerShell@2
      displayName: "Sets multi-job variable"
      name: "bootstrapInitializedOutput"
      inputs:
        targetType: 'inline'
        script: '

          $bootstrapInitialized = $ENV:BOOTSTRAP_INITIALIZED;
          Write-Host "##vso[task.setvariable variable=BOOTSTRAP_INITIALIZED;isOutput=true]$bootstrapInitialized";'
        pwsh: true
  - job: LogAnalytics
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ StorageAccounts ]
    variables:
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstrapInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Log Analytics"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.

          Invoke-Pester -Script "./Modules/LogAnalytics/2.0/Tests";

          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Log Analytics"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "LogAnalytics" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
  - job: NetworkSecurityGroups
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ StorageAccounts ]
    variables:
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstrapInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Network Security Groups"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.

          Invoke-Pester -Script "./Modules/NetworkSecurityGroups/2.0/Tests";

          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - OnPremises NSG"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "OnPremisesNSG" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
  - job: VirtualNetwork
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ StorageAccounts ]
    variables:
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstrapInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Virtual NetWork"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.

          Invoke-Pester -Script "./Modules/VirtualNetwork/2.0/Tests";

          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Virtual Network"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "VirtualNetwork" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
  - job: VirtualNetworkGateway
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ StorageAccounts ]
    variables:
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstrapInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Virtual Network Gateway"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.

          Invoke-Pester -Script "./Modules/VirtualNetworkGateway/2.0/Tests";

          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Virtual Network Gateway"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "VirtualNetworkGateway" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
  - job: KeyVault
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ StorageAccounts ]
    variables:
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstrapInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Key Vault"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.

          Invoke-Pester -Script "./Modules/KeyVault/2.0/Tests";

          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Key Vault"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "KeyVault" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Enable Service Endpoint On Key Vault"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "EnableServiceEndpointOnKeyVault" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
  - job: ActiveDirectory
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ StorageAccounts ]
    variables:
      BOOTSTRAP_INITIALIZED: $[dependencies.StorageAccounts.outputs['bootstrapInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: PowerShell@2
      displayName: "Pester Tests for Module - Active Directory"
      inputs:
        targetType: 'inline'
        script: '# Write your powershell commands here.

          Invoke-Pester -Script "./Modules/ActiveDirectory/2.0/Tests";

          # Use the environment variables input below to pass secret variables to this script.'
        pwsh: true
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Active Directory VM"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "ActiveDirectoryVM" -Validate'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Install Active Directory"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "InstallActiveDirectory" -Validate -TearDownValidationResourceGroup'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
- stage: DeployEnvironment
  jobs:
  - job: DiagnosticStorageAccount
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    steps:
    - task: AzurePowerShell@4
      displayName: "Diagnostic Storage Account"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "DiagnosticStorageAccount"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
    - task: PowerShell@2
      displayName: "Sets multi-job variable"
      name: "bootstrapInitializedOutput"
      inputs:
        targetType: 'inline'
        script: '

          $bootstrapInitialized = $ENV:BOOTSTRAP_INITIALIZED;
          Write-Host "##vso[task.setvariable variable=BOOTSTRAP_INITIALIZED;isOutput=true]$bootstrapInitialized";'
        pwsh: true
  - job: LogAnalytics
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: DiagnosticStorageAccount
    variables:
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstrapInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Log Analytics"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "LogAnalytics"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
  - job: NetworkSecurityGroups
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ LogAnalytics, DiagnosticStorageAccount ]
    variables:
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstrapInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "OnPremises Network Security Group"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "OnPremisesNSG"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
    - task: AzurePowerShell@4
      displayName: "ARM Validation - Enable Network Security Group Flow Logs"
      inputs:
        azureSubscription: 'vdc2-spoke1'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/AKS/LandingZone/definition.json" -ModuleConfigurationName "OnPremisesNSG"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
  - job: VirtualNetwork
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ NetworkSecurityGroups, DiagnosticStorageAccount ]
    variables:
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstrapInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Virtual Network"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "VirtualNetwork"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
  - job: KeyVault
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ DiagnosticStorageAccount, LogAnalytics, VirtualNetwork ]
    variables:
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstrapInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Key Vault"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "KeyVault"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
    - task: AzurePowerShell@4
      displayName: "Create Root Certificate"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "CreateRootCertificate"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
    - task: AzurePowerShell@4
      displayName: "Enable Service Endpoint on Key Vault"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "EnableServiceEndpointOnKeyVault"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
  - job: VirtualNetworkGateway
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ VirtualNetwork, KeyVault, DiagnosticStorageAccount ]
    variables:
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstrapInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Virtual Network Gateway"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "VirtualNetworkGateway"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
  - job: ArtifactsStorageAccount
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    variables:
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstrapInitializedOutput.BOOTSTRAP_INITIALIZED']]
    dependsOn: DiagnosticStorageAccount
    steps:
    - task: AzurePowerShell@4
      displayName: "Artifacts Storage Account"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "ArtifactsStorageAccount"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
    - task: AzurePowerShell@4
      displayName: "Upload Scripts To Artifacts Storage"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "UploadScriptsToArtifactsStorage"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
  - job: ActiveDirectory
    timeoutInMinutes: 0
    pool:
      name: 'vdc-self-hosted'
    dependsOn: [ VirtualNetwork, DiagnosticStorageAccount, LogAnalytics, KeyVault, ArtifactsStorageAccount ]
    variables:
      BOOTSTRAP_INITIALIZED: $[dependencies.DiagnosticStorageAccount.outputs['bootstrapInitializedOutput.BOOTSTRAP_INITIALIZED']]
    steps:
    - task: AzurePowerShell@4
      displayName: "Active Directory VM"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "ActiveDirectoryVM"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
    - task: AzurePowerShell@4
      displayName: "Install Active Directory"
      inputs:
        azureSubscription: 'vdc2-onprem'
        ScriptType: 'FilePath'
        ScriptPath: 'Orchestration/OrchestrationService/ModuleConfigurationDeployment.ps1'
        ScriptArguments: '-DefinitionPath "Environments/OnPremises/definition.json" -ModuleConfigurationName "InstallActiveDirectory"'
        azurePowerShellVersion: 'LatestVersion'
      env:
        ADMIN_USER_PWD: $(ADMIN_USER_PWD)
        ADMIN_USER_SSH: $(ADMIN_USER_SSH)
        DEVOPS_SERVICE_PRINCIPAL_USER_ID: $(DEVOPS_SERVICE_PRINCIPAL_USER_ID)
        KEYVAULT_MANAGEMENT_USER_ID: $(KEYVAULT_MANAGEMENT_USER_ID)
        DOMAIN_ADMIN_USER_PWD: $(DOMAIN_ADMIN_USER_PWD)
        DOMAIN_ADMIN_USERNAME: $(DOMAIN_ADMIN_USERNAME)
        TENANT_ID: $(TENANT_ID)
        ORGANIZATION_NAME: $(ORGANIZATION_NAME)
        VDC_SUBSCRIPTIONS: $(VDC_SUBSCRIPTIONS)
        VDC_TOOLKIT_SUBSCRIPTION: $(VDC_TOOLKIT_SUBSCRIPTION)
        SCRIPT_EXECUTION_SP_ID: $(SCRIPT_EXECUTION_SP_ID)
        SCRIPT_EXECUTION_SP_KEY: $(SCRIPT_EXECUTION_SP_KEY)
