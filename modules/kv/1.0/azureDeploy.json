{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "deployment-prefix": {
            "type": "string",
            "metadata": {
                "description": "Deployment prefix. E.g. Organization-DeploymentType"
            }
        },
        "access-policies": {
            "type": "array",
            "metadata": {
                "description": "Access policies object"
            }
        },
        "logs-retention-in-days": {
            "type": "int",
            "defaultValue": 365,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
            }
        },
        "enable-vault-for-deployment": {
            "type": "bool",
            "defaultValue": true,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies if the vault is enabled for deployment by script or compute"
            }
        },
        "enable-vault-for-templateDeployment": {
            "type": "bool",
            "defaultValue": true,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies if the vault is enabled for a template deployment"
            }
        },
        "enable-vault-for-diskEncryption": {
            "type": "bool",
            "defaultValue": true,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
            }
        },
        "vault-sku": {
            "type": "string",
            "defaultValue": "Premium",
            "allowedValues": [
                "Premium"
            ],
            "metadata": {
                "description": "Specifies the SKU for the vault"
            }
        },
        "la-resourceId": {
            "type": "string",
            "metadata": {
                "description": "Log Analytics workspace resource identifier"
            }
        },
        "storageAccount-resourceId": {
            "type": "string",
            "metadata": {
                "description": "Diagnostic storage account resource identifier"
            }
        },
        "secrets-object": {
            "type": "secureObject",
            "defaultValue": "{}",
            "metadata": {
                "description": "all secrets {\"secretName\":\"\",\"secretValue\":\"\"} wrapped in a secure object"
            }
        },
        "network-acls": {
            "type": "object",
            "metadata": {
                "description": "Service endpoint object information"
            }
        },
        "vnet-id": {
            "type": "string",
            "metadata": {
                "description": "Shared services Virtual Network resource identifier"
            }
        }
    },
    "variables": {
        "deploy-service-endpoint": "[not(empty(parameters('network-acls')))]",
        "key-vault-name": "[concat(parameters('deployment-prefix'), '-kv')]",
        "virtualNetwork-rules": {
            "copy": [
                {
                    "name": "virtualNetworkRules",
                    "count": "[if(equals(variables('deploy-service-endpoint'), bool('false')), 1, if(equals(length(parameters('network-acls').virtualNetworkRules), 0), 1, length(parameters('network-acls').virtualNetworkRules)))]",
                    "input": {
                        "id": "[if(equals(variables('deploy-service-endpoint'), bool('false')), json('null'), if(equals(length(parameters('network-acls').virtualNetworkRules), 0), json('null'), concat(parameters('vnet-id'), '/subnets/', parameters('network-acls').virtualNetworkRules[copyIndex('virtualNetworkRules')].subnet)))]"
                    }
                }
            ]
        },
        "empty-array": []
    },
    "resources": [
        {
            "type": "Microsoft.KeyVault/vaults",
            "name": "[variables('key-vault-name')]",
            "apiVersion": "2018-02-14",
            "location": "[resourceGroup().location]",
            "tags": {
                "displayName": "[variables('key-vault-name')]"
            },
            "properties": {
                "enabledForDeployment": "[parameters('enable-vault-for-deployment')]",
                "enabledForTemplateDeployment": "[parameters('enable-vault-for-templateDeployment')]",
                "enabledForDiskEncryption": "[parameters('enable-vault-for-diskEncryption')]",
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": "[parameters('access-policies')]",
                "sku": {
                    "name": "[parameters('vault-sku')]",
                    "family": "A"
                },
                "networkAcls": {
                    "bypass": "[if(not(variables('deploy-service-endpoint')), json('null'), parameters('network-acls').bypass)]",
                    "defaultAction": "[if(not(variables('deploy-service-endpoint')), json('null'), parameters('network-acls').defaultAction)]",
                    "virtualNetworkRules": "[if(not(variables('deploy-service-endpoint')), json('null'), if(equals(length(parameters('network-acls').virtualNetworkRules), 0), variables('empty-array'), variables('virtualNetwork-rules').virtualNetworkRules))]",
                    "ipRules": "[if(not(variables('deploy-service-endpoint')), json('null'), if(equals(length(parameters('network-acls').ipRules), 0), variables('empty-array'), parameters('network-acls').ipRules))]"
                }
            },
            "resources": [
                {
                    "type": "Microsoft.KeyVault/vaults/providers/diagnosticsettings",
                    "name": "[concat(variables('key-vault-name'), '/Microsoft.Insights/service')]",
                    "apiVersion": "2016-09-01",
                    "location": "[resourceGroup().location]",
                    "dependsOn": [
                        "[concat('Microsoft.KeyVault/vaults/', variables('key-vault-name'))]"
                    ],
                    "properties": {
                        "storageAccountId": "[parameters('storageAccount-resourceId')]",
                        "workspaceId": "[parameters('la-resourceId')]",
                        "logs": [
                            {
                                "category": "AuditEvent",
                                "enabled": true,
                                "retentionPolicy": {
                                    "enabled": true,
                                    "days": "[parameters('logs-retention-in-days')]"
                                }
                            }
                        ],
                        "metrics": [
                            {
                                "category": "AllMetrics",
                                "enabled": true,
                                "retentionPolicy": {
                                    "days": "[parameters('logs-retention-in-days')]",
                                    "enabled": true
                                }
                            }
                        ]
                    }
                }
            ]
        },
        {
            "type": "Microsoft.KeyVault/vaults/providers/locks",
            "apiVersion": "2016-09-01",
            "name": "[concat(variables('key-vault-name'), '/Microsoft.Authorization/keyVaultDoNotDelete')]",
            "dependsOn": [
                "[concat('Microsoft.KeyVault/vaults/', variables('key-vault-name'))]"
            ],
            "comments": "Resource lock on key vault",
            "properties": {
                "level": "CannotDelete"
            }
        },
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "name": "[if(equals(length(parameters('secrets-object').secrets), 0), concat(variables('key-vault-name'), '/', 'dummy'), concat(variables('key-vault-name'), '/', parameters('secrets-object').secrets[copyIndex()].secretName))]",
            "apiVersion": "2015-06-01",
            "condition": "[if(equals(length(parameters('secrets-object').secrets), 0), bool('false'), bool('true'))]",
            "copy": {
                "count": "[if(equals(length(parameters('secrets-object').secrets), 0), 1, length(parameters('secrets-object').secrets))]",
                "name": "secretsCopy"
            },
            "dependsOn": [
                "[concat('Microsoft.KeyVault/vaults/', variables('key-vault-name'))]"
            ],
            "properties": {
                "value": "[if(equals(length(parameters('secrets-object').secrets), 0), 'dummy', parameters('secrets-object').secrets[copyIndex()].secretValue)]"
            }
        }
    ],
    "outputs": {
        "kv-id": {
            "type": "string",
            "value": "[resourceId('Microsoft.KeyVault/vaults', variables('key-vault-name'))]"
        },
        "kv-name": {
            "type": "string",
            "value": "[variables('key-vault-name')]"
        },
        "kv-resourceGroup": {
            "type": "string",
            "value": "[resourceGroup().name]"
        },
        "kv-uri": {
            "type": "string",
            "value": "[reference(concat('Microsoft.KeyVault/vaults/', variables('key-vault-name')), '2016-10-01').vaultUri]"
        }
    }
}